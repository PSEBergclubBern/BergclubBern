<?php

namespace BergclubPlugin\Commands\Processor;

use BergclubPlugin\Commands\Entities\Entity;
use BergclubPlugin\Commands\Entities\Mitteilung;

/**
 * The MitteilungProcessor takes old mitteilungen as array and handles the saving into the db
 *
 * @author Kevin studer <kreemer@me.com>
 */
class MitteilungProcessor extends Processor
{
    /**
     * process the mitteilungen
     *
     * @param $values
     * @return array
     */
    public function process($values): array
    {
        if (count($values) != 1) {
            throw new \RuntimeException();
        }
        $values = current($values);
        $list = array();
        foreach ($values as $key => $mitteilung) {
            $this->logger->debug('Processing element ' . (1 + $key));

            $mit = new Mitteilung(
                $mitteilung['id'],
                $mitteilung['datum'],
                $this->convertTitleField($mitteilung['titel']),
                $this->convertTextField($mitteilung['text'])
            );

            $list[] = $mit;
        }

        return $list;
    }

    /**
     * save an entity generated by the process method
     *
     * @param Entity $entity
     * @param bool $noOp
     * @return void
     */
    public function save(Entity $entity, $noOp = true)
    {
        if (!($entity instanceof Mitteilung)) {
            $this->logger->error('Entity not importable by this processor');
        }

        $categoryId = null;
        foreach (get_categories() as $category) {
            /** @var $category \WP_Term */
            if ($category->slug == 'mitteilungen') {
                $categoryId = $category->term_id;
            }
        }
        if (!$categoryId) {
            $this->logger->error('Didnt find category "mitteilungen"');
        }
        $this->logger->log('Importing ' . $this->getEntityName() . ': ' . $entity);
        if (!$noOp) {
            wp_insert_post(
                array(
                    'post_title' => $entity->titel,
                    'post_author' => 1,
                    'post_status' => 'publish',
                    'post_date' => $entity->datum,
                    'post_content' => $entity->text,
                    'post_category' => array($categoryId),
                ),
                true
            );
        }
    }

    /**
     * The entity name
     *
     * @return string
     */
    public function getEntityName()
    {
        return 'Mitteilungen';
    }
}